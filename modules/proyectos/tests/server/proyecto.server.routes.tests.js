'use strict';

var should = require('should'),
  request = require('supertest'),
  path = require('path'),
  mongoose = require('mongoose'),
  User = mongoose.model('User'),
  Proyecto = mongoose.model('Proyecto'),
  express = require(path.resolve('./config/lib/express'));

/**
 * Globals
 */
var app, agent, credentials, user, proyecto;

/**
 * Proyecto routes tests
 */
describe('Proyecto CRUD tests', function () {

  before(function (done) {
    // Get application
    app = express.init(mongoose);
    agent = request.agent(app);

    done();
  });

  beforeEach(function (done) {
    // Create user credentials
    credentials = {
      username: 'username',
      password: 'M3@n.jsI$Aw3$0m3'
    };

    // Create a new user
    user = new User({
      firstName: 'Full',
      lastName: 'Name',
      displayName: 'Full Name',
      email: 'test@test.com',
      username: credentials.username,
      password: credentials.password,
      provider: 'local'
    });

    // Save a user to the test db and create new Proyecto
    user.save(function () {
      proyecto = {
        name: 'Proyecto name'
      };

      done();
    });
  });

  it('should be able to save a Proyecto if logged in', function (done) {
    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new Proyecto
        agent.post('/api/proyectos')
          .send(proyecto)
          .expect(200)
          .end(function (proyectoSaveErr, proyectoSaveRes) {
            // Handle Proyecto save error
            if (proyectoSaveErr) {
              return done(proyectoSaveErr);
            }

            // Get a list of Proyectos
            agent.get('/api/proyectos')
              .end(function (proyectosGetErr, proyectosGetRes) {
                // Handle Proyecto save error
                if (proyectosGetErr) {
                  return done(proyectosGetErr);
                }

                // Get Proyectos list
                var proyectos = proyectosGetRes.body;

                // Set assertions
                (proyectos[0].user._id).should.equal(userId);
                (proyectos[0].name).should.match('Proyecto name');

                // Call the assertion callback
                done();
              });
          });
      });
  });

  it('should not be able to save an Proyecto if not logged in', function (done) {
    agent.post('/api/proyectos')
      .send(proyecto)
      .expect(403)
      .end(function (proyectoSaveErr, proyectoSaveRes) {
        // Call the assertion callback
        done(proyectoSaveErr);
      });
  });

  it('should not be able to save an Proyecto if no name is provided', function (done) {
    // Invalidate name field
    proyecto.name = '';

    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new Proyecto
        agent.post('/api/proyectos')
          .send(proyecto)
          .expect(400)
          .end(function (proyectoSaveErr, proyectoSaveRes) {
            // Set message assertion
            (proyectoSaveRes.body.message).should.match('Please fill Proyecto name');

            // Handle Proyecto save error
            done(proyectoSaveErr);
          });
      });
  });

  it('should be able to update an Proyecto if signed in', function (done) {
    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new Proyecto
        agent.post('/api/proyectos')
          .send(proyecto)
          .expect(200)
          .end(function (proyectoSaveErr, proyectoSaveRes) {
            // Handle Proyecto save error
            if (proyectoSaveErr) {
              return done(proyectoSaveErr);
            }

            // Update Proyecto name
            proyecto.name = 'WHY YOU GOTTA BE SO MEAN?';

            // Update an existing Proyecto
            agent.put('/api/proyectos/' + proyectoSaveRes.body._id)
              .send(proyecto)
              .expect(200)
              .end(function (proyectoUpdateErr, proyectoUpdateRes) {
                // Handle Proyecto update error
                if (proyectoUpdateErr) {
                  return done(proyectoUpdateErr);
                }

                // Set assertions
                (proyectoUpdateRes.body._id).should.equal(proyectoSaveRes.body._id);
                (proyectoUpdateRes.body.name).should.match('WHY YOU GOTTA BE SO MEAN?');

                // Call the assertion callback
                done();
              });
          });
      });
  });

  it('should be able to get a list of Proyectos if not signed in', function (done) {
    // Create new Proyecto model instance
    var proyectoObj = new Proyecto(proyecto);

    // Save the proyecto
    proyectoObj.save(function () {
      // Request Proyectos
      request(app).get('/api/proyectos')
        .end(function (req, res) {
          // Set assertion
          res.body.should.be.instanceof(Array).and.have.lengthOf(1);

          // Call the assertion callback
          done();
        });

    });
  });

  it('should be able to get a single Proyecto if not signed in', function (done) {
    // Create new Proyecto model instance
    var proyectoObj = new Proyecto(proyecto);

    // Save the Proyecto
    proyectoObj.save(function () {
      request(app).get('/api/proyectos/' + proyectoObj._id)
        .end(function (req, res) {
          // Set assertion
          res.body.should.be.instanceof(Object).and.have.property('name', proyecto.name);

          // Call the assertion callback
          done();
        });
    });
  });

  it('should return proper error for single Proyecto with an invalid Id, if not signed in', function (done) {
    // test is not a valid mongoose Id
    request(app).get('/api/proyectos/test')
      .end(function (req, res) {
        // Set assertion
        res.body.should.be.instanceof(Object).and.have.property('message', 'Proyecto is invalid');

        // Call the assertion callback
        done();
      });
  });

  it('should return proper error for single Proyecto which doesnt exist, if not signed in', function (done) {
    // This is a valid mongoose Id but a non-existent Proyecto
    request(app).get('/api/proyectos/559e9cd815f80b4c256a8f41')
      .end(function (req, res) {
        // Set assertion
        res.body.should.be.instanceof(Object).and.have.property('message', 'No Proyecto with that identifier has been found');

        // Call the assertion callback
        done();
      });
  });

  it('should be able to delete an Proyecto if signed in', function (done) {
    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new Proyecto
        agent.post('/api/proyectos')
          .send(proyecto)
          .expect(200)
          .end(function (proyectoSaveErr, proyectoSaveRes) {
            // Handle Proyecto save error
            if (proyectoSaveErr) {
              return done(proyectoSaveErr);
            }

            // Delete an existing Proyecto
            agent.delete('/api/proyectos/' + proyectoSaveRes.body._id)
              .send(proyecto)
              .expect(200)
              .end(function (proyectoDeleteErr, proyectoDeleteRes) {
                // Handle proyecto error error
                if (proyectoDeleteErr) {
                  return done(proyectoDeleteErr);
                }

                // Set assertions
                (proyectoDeleteRes.body._id).should.equal(proyectoSaveRes.body._id);

                // Call the assertion callback
                done();
              });
          });
      });
  });

  it('should not be able to delete an Proyecto if not signed in', function (done) {
    // Set Proyecto user
    proyecto.user = user;

    // Create new Proyecto model instance
    var proyectoObj = new Proyecto(proyecto);

    // Save the Proyecto
    proyectoObj.save(function () {
      // Try deleting Proyecto
      request(app).delete('/api/proyectos/' + proyectoObj._id)
        .expect(403)
        .end(function (proyectoDeleteErr, proyectoDeleteRes) {
          // Set message assertion
          (proyectoDeleteRes.body.message).should.match('User is not authorized');

          // Handle Proyecto error error
          done(proyectoDeleteErr);
        });

    });
  });

  it('should be able to get a single Proyecto that has an orphaned user reference', function (done) {
    // Create orphan user creds
    var _creds = {
      username: 'orphan',
      password: 'M3@n.jsI$Aw3$0m3'
    };

    // Create orphan user
    var _orphan = new User({
      firstName: 'Full',
      lastName: 'Name',
      displayName: 'Full Name',
      email: 'orphan@test.com',
      username: _creds.username,
      password: _creds.password,
      provider: 'local'
    });

    _orphan.save(function (err, orphan) {
      // Handle save error
      if (err) {
        return done(err);
      }

      agent.post('/api/auth/signin')
        .send(_creds)
        .expect(200)
        .end(function (signinErr, signinRes) {
          // Handle signin error
          if (signinErr) {
            return done(signinErr);
          }

          // Get the userId
          var orphanId = orphan._id;

          // Save a new Proyecto
          agent.post('/api/proyectos')
            .send(proyecto)
            .expect(200)
            .end(function (proyectoSaveErr, proyectoSaveRes) {
              // Handle Proyecto save error
              if (proyectoSaveErr) {
                return done(proyectoSaveErr);
              }

              // Set assertions on new Proyecto
              (proyectoSaveRes.body.name).should.equal(proyecto.name);
              should.exist(proyectoSaveRes.body.user);
              should.equal(proyectoSaveRes.body.user._id, orphanId);

              // force the Proyecto to have an orphaned user reference
              orphan.remove(function () {
                // now signin with valid user
                agent.post('/api/auth/signin')
                  .send(credentials)
                  .expect(200)
                  .end(function (err, res) {
                    // Handle signin error
                    if (err) {
                      return done(err);
                    }

                    // Get the Proyecto
                    agent.get('/api/proyectos/' + proyectoSaveRes.body._id)
                      .expect(200)
                      .end(function (proyectoInfoErr, proyectoInfoRes) {
                        // Handle Proyecto error
                        if (proyectoInfoErr) {
                          return done(proyectoInfoErr);
                        }

                        // Set assertions
                        (proyectoInfoRes.body._id).should.equal(proyectoSaveRes.body._id);
                        (proyectoInfoRes.body.name).should.equal(proyecto.name);
                        should.equal(proyectoInfoRes.body.user, undefined);

                        // Call the assertion callback
                        done();
                      });
                  });
              });
            });
        });
    });
  });

  afterEach(function (done) {
    User.remove().exec(function () {
      Proyecto.remove().exec(done);
    });
  });
});
